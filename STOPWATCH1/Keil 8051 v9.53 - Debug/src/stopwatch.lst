C51 COMPILER V9.53.0.0   STOPWATCH                                                         04/23/2017 20:01:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE STOPWATCH
OBJECT MODULE PLACED IN .\src/stopwatch.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/src/stopwatch.c OMF2 SMALL DEBUG OBJ
                    -ECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR
                    -(/Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/inc;/Users/s150563/Documents/Cooper/Sem
                    -ester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/inc/config;/Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Proj
                    -ect1/STOPWATCH1/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM
                    -8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/
                    -bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/App
                    -lications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;/Ap
                    -plications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/gr
                    -aphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_
                    -lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8
                    -_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/App
                    -lications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/stopwatch.l
                    -st) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/stopwatch.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          ///////////////////////////////////////////////////////////////////////////////
   7          // voltmeter.c
   8          ///////////////////////////////////////////////////////////////////////////////
   9          
  10          ///////////////////////////////////////////////////////////////////////////////
  11          // Includes
  12          ///////////////////////////////////////////////////////////////////////////////
  13          
  14          #include "bsp.h"
  15          #include "tick.h"
  16          #include "disp.h"
  17          #include "render.h"
  18          #include "voltmeter.h"
  19          #include "joystick.h"
  20          #include "adc.h"
  21          #include "thinfont.h"
  22          #include "InitDevice.h"
  23          #include <SI_EFM8BB3_Register_Enums.h>
  24          
  25          // Configurator set for HFOSC0/8
  26          #define SYSCLK             3062000
  27          
  28          // Configurator set for timer overflow every 100 ms / 10 Hz.
  29          #define LED_TOGGLE_RATE           800 // LED toggle rate in milliseconds
  30                                                 // if LED_TOGGLE_RATE = 1, the LED will
  31                                                 // be on for 1 millisecond and off for
  32                                                 // 1 millisecond
  33          
  34          ///////////////////////////////////////////////////////////////////////////////
  35          // PIN DEFINITIONS
  36          ///////////////////////////////////////////////////////////////////////////////
  37          SI_SBIT(LED1, SFR_P1, 4);                 //P1.4 LED1
  38          SI_SBIT(BTN0, SFR_P0, 2);                 // P0.2 BTN0
  39          SI_SBIT(BTN1, SFR_P0, 3);                 // P0.3 BTN1
  40          
  41          ///////////////////////////////////////////////////////////////////////////////
  42          // Globals
C51 COMPILER V9.53.0.0   STOPWATCH                                                         04/23/2017 20:01:02 PAGE 2   

  43          ///////////////////////////////////////////////////////////////////////////////
  44          
  45          // Generic line buffer
  46          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  47          SI_SEGMENT_VARIABLE(String[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  48          
  49          uint16_t time;
  50          char timeStr[9];
  51          uint16_t Laps[9];
  52          uint8_t lapcount;
  53          uint8_t currentlap;
  54          uint8_t start_track;
  55          
  56          ///////////////////////////////////////////////////////////////////////////////
  57          // Supporting Functions
  58          //////////////////////////////////////////////////////////////////////////////
  59          //-----------------------------------------------------------------------------
  60          // drawScreenText
  61          //-----------------------------------------------------------------------------
  62          //
  63          // Show one line of text on the screen
  64          //
  65          // str - pointer to string text (0 - 21 characters) to display
  66          // rowNum - row number of the screen (0 - 127)
  67          // fontScale - font scaler (1 - 4)
  68          //
  69          void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_t fontSc
             -ale)
  70          {
  71   1        uint8_t i, j;
  72   1      
  73   1        for (i = 0; i < FONT_HEIGHT; i++)
  74   1        {
  75   2          RENDER_ClrLine(Line);
  76   2          RENDER_Large_StrLine(Line, 4, i, (SI_VARIABLE_SEGMENT_POINTER(, char, RENDER_STR_SEG))str, fontScale);
  77   2      
  78   2          for (j = 1; j < fontScale + 1; j++)
  79   2          {
  80   3            DISP_WriteLine(rowNum + (i * fontScale) + j, Line);
  81   3          }
  82   2        }
  83   1      }
  84          
  85          void time2str(uint16_t t, char * str)
  86          {
  87   1        int8_t pos = 7;
  88   1        uint8_t count = 0;
  89   1      
  90   1        // Work backwards generating the string
  91   1        // Start with null-terminator
  92   1        // followed by V symbol
  93   1        str[pos--] = '\0';
  94   1        str[pos--] = 's';
  95   1        str[pos--] = ' ';
  96   1      
  97   1        // followed by thousandths digit
  98   1        // followed by hundredths digit
  99   1        // followed by tenths digit
 100   1        // followed by the decimal point at pos=1
 101   1        // followed by the ones digit
 102   1        for (; pos >= 0; pos--)
 103   1        {
 104   2          // Pos = 1 is the location of the decimal point
C51 COMPILER V9.53.0.0   STOPWATCH                                                         04/23/2017 20:01:02 PAGE 3   

 105   2          if (count == 1)
 106   2          {
 107   3            str[pos--] = '.';
 108   3          }
 109   2              // Get the right-most digit from the number
 110   2              // and convert to ascii
 111   2              str[pos] = (t % 10) + '0';
 112   2      
 113   2              // Shift number by 1 decimal place to the right
 114   2              t /= 10;
 115   2              count+=1;
 116   2        }
 117   1      }
 118          
 119          void initTimer0(){
 120   1              uint8_t TCON_save;
 121   1              TCON_save = TCON;
 122   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 123   1              TH0 = 0xC0; //(0xC0 << TH0_TH0__SHIFT);
 124   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 125   1      
 126   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_48;
 127   1      
 128   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 129   1                                      | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 130   1      
 131   1              TCON |= TCON_TR0__RUN;
 132   1      
 133   1              IE_ET0 = 0;
 134   1      }
 135          
 136          void initBTNinterrupts(void){
 137   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_2
 138   1                                      | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_3;
 139   1              IE_EX0 = 1;
 140   1              IE_EX1 = 1;
 141   1      }
 142          
 143          void drawTime(){
 144   1              time2str(time, timeStr);
 145   1              drawScreenText(timeStr, 20, 2);
 146   1      }
 147          
 148          void drawNewLap(){
 149   1              uint16_t temp_time;
 150   1              if(currentlap != lapcount && lapcount<9){
 151   2                      Laps[currentlap] = time;
 152   2                      if(currentlap == 0){
 153   3                              drawScreenText("Laps:", 40, 1);
 154   3                              time2str(time, timeStr);
 155   3                              drawScreenText(timeStr, 50, 1);
 156   3                      }else {
 157   3                              temp_time = Laps[currentlap]-Laps[currentlap-1];
 158   3                              time2str(temp_time, timeStr);
 159   3                              drawScreenText(timeStr, 50+(8*currentlap), 1);
 160   3                      }
 161   2                      currentlap = lapcount;
 162   2              }
 163   1      }
 164          
 165          ///////////////////////////////////////////////////////////////////////////////
 166          // Interrupt Service Routines
 167          ///////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.53.0.0   STOPWATCH                                                         04/23/2017 20:01:02 PAGE 4   

 168          
 169          //BTN0 TRIGGERED INTERRUPT
 170          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
 171          {
 172   1              if(BTN0 == 0){
 173   2                      IE_ET0 = !IE_ET0;
 174   2                      start_track = !start_track;
 175   2              }
 176   1              IE_EX0 = 0; //TURN OFF EXTERNAL0 INTERRUPTS (SO THAT MULTIPLE BTN PRESSES ARE NOT REGISTERED)
 177   1      }
 178          
 179          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
 180          {
 181   1              if(BTN1 == 0){
 182   2                      lapcount++;
 183   2              }
 184   1              IE_EX1 = 0;
 185   1      }
 186          
 187          
 188          //-----------------------------------------------------------------------------
 189          // TIMER0_ISR
 190          //-----------------------------------------------------------------------------
 191          //
 192          // TIMER0 ISR Content goes here. Remember to clear flag bits:
 193          // TCON::TF0 (Timer 0 Overflow Flag)
 194          //
 195          // Here we process the Timer0 interrupt and toggle the LED when appropriate
 196          //
 197          //-----------------------------------------------------------------------------
 198          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 199          {
 200   1         static uint16_t counter = 0;
 201   1      
 202   1         counter++;
 203   1      
 204   1         if(counter == LED_TOGGLE_RATE)
 205   1         {
 206   2                time++;
 207   2                counter = 0;
 208   2         }
 209   1      }
 210          
 211          extern void start(void);
 212          
 213          ///////////////////////////////////////////////////////////////////////////////
 214          // Driver Function
 215          ///////////////////////////////////////////////////////////////////////////////
 216          
 217          void Stopwatch_main(void)
 218          {
 219   1              initBTNinterrupts();
 220   1              initTimer0();
 221   1      
 222   1              drawScreenText("STOPWATCH", 0, 2);
 223   1              drawScreenText("\t\t\t\t\t\t\t\t\tJoey&Nikola", 116, 1); //Draws string in bottom right corner
 224   1              time = 0;
 225   1              lapcount = 0;
 226   1              currentlap = 0;
 227   1              start_track = 0;
 228   1      
 229   1              while(1)
 230   1              {
C51 COMPILER V9.53.0.0   STOPWATCH                                                         04/23/2017 20:01:02 PAGE 5   

 231   2                      drawTime();
 232   2                      drawNewLap();
 233   2                      if((start_track == 1) && (IE_EX0 == 0)){
 234   3                              IE_ET0 = 0;
 235   3                              start();
 236   3                              IE_ET0 = 1;
 237   3                      }
 238   2      
 239   2                      if(BTN0 == 1) //BTN0 UNPRESSED
 240   2                              IE_EX0 = 1; //TURN BACK ON EXTERNAL (BTN) INTERRUPTS
 241   2                      if(BTN1 == 1)
 242   2                              IE_EX1 = 1;
 243   2              }
 244   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    611    ----
   CONSTANT SIZE    =    837    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
