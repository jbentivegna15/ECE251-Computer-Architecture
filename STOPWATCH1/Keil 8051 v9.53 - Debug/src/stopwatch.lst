C51 COMPILER V9.53.0.0   STOPWATCH                                                         05/15/2017 11:46:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE STOPWATCH
OBJECT MODULE PLACED IN .\src/stopwatch.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/s150563/Documents/Cooper/Comp_Arch/ECE251-Project1/STOPWATCH1/src/stopwatch.c OMF2 SMALL DEBUG OBJECTEXTEND R
                    -OM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/s15
                    -0563/Documents/Cooper/Comp_Arch/ECE251-Project1/STOPWATCH1/inc/graphics;/Users/s150563/Documents/Cooper/Comp_Arch/ECE251
                    --Project1/STOPWATCH1/inc;/Users/s150563/Documents/Cooper/Comp_Arch/ECE251-Project1/STOPWATCH1/inc/config;/Applications/S
                    -implicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Co
                    -ntents/Eclipse/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/E
                    -clipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Ecl
                    -ipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/
                    -developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse
                    -/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Conten
                    -ts/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.ap
                    -p/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Ecl
                    -ipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/stopwatch.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJEC
                    -T(.\src/stopwatch.OBJ)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////
   2          // Includes
   3          ///////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include "tick.h"
   7          #include "disp.h"
   8          #include "render.h"
   9          #include "voltmeter.h"
  10          #include "joystick.h"
  11          #include "adc.h"
  12          #include "thinfont.h"
  13          #include "InitDevice.h"
  14          #include <SI_EFM8BB3_Register_Enums.h>
  15          
  16          // Configurator set for HFOSC0/8
  17          #define SYSCLK             3062000
  18          
  19          #define LED_TOGGLE_RATE           800 //toggles timer0 about every 100ms
  20          
  21          ///////////////////////////////////////////////////////////////////////////////
  22          // PIN DEFINITIONS
  23          ///////////////////////////////////////////////////////////////////////////////
  24          SI_SBIT(BTN0, SFR_P0, 2);                 // P0.2 BTN0
  25          SI_SBIT(BTN1, SFR_P0, 3);                 // P0.3 BTN1
  26          
  27          ///////////////////////////////////////////////////////////////////////////////
  28          // Globals
  29          ///////////////////////////////////////////////////////////////////////////////
  30          
  31          // Generic line buffer
  32          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  33          SI_SEGMENT_VARIABLE(String[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  34          
  35          uint16_t time;
  36          char timeStr[9];
  37          uint16_t Laps[9];
  38          uint8_t lapcount;
  39          uint8_t currentlap;
  40          uint8_t start_track;
  41          
  42          ///////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.53.0.0   STOPWATCH                                                         05/15/2017 11:46:41 PAGE 2   

  43          // Supporting Functions
  44          //////////////////////////////////////////////////////////////////////////////
  45          
  46          //(taken from voltmeter.c)
  47          //-----------------------------------------------------------------------------
  48          // drawScreenText
  49          //-----------------------------------------------------------------------------
  50          //
  51          // Show one line of text on the screen
  52          //
  53          // str - pointer to string text (0 - 21 characters) to display
  54          // rowNum - row number of the screen (0 - 127)
  55          // fontScale - font scaler (1 - 4)
  56          //
  57          void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_t fontSc
             -ale)
  58          {
  59   1        uint8_t i, j;
  60   1      
  61   1        for (i = 0; i < FONT_HEIGHT; i++)
  62   1        {
  63   2          RENDER_ClrLine(Line);
  64   2          RENDER_Large_StrLine(Line, 4, i, (SI_VARIABLE_SEGMENT_POINTER(, char, RENDER_STR_SEG))str, fontScale);
  65   2      
  66   2          for (j = 1; j < fontScale + 1; j++)
  67   2          {
  68   3            DISP_WriteLine(rowNum + (i * fontScale) + j, Line);
  69   3          }
  70   2        }
  71   1      }
  72          
  73          //adapts miliVolt2str from voltmeter.c to
  74          //takes in time integer counting in tenths of a second and converts to string
  75          //in form of timestr = "yyy.y s"
  76          void time2str(uint16_t t, char * str)
  77          {
  78   1        int8_t pos = 7;
  79   1        uint8_t count = 0;
  80   1      
  81   1        // Work backwards generating the string
  82   1        // Start with null-terminator
  83   1        // followed by V symbol
  84   1        str[pos--] = '\0';
  85   1        str[pos--] = 's';
  86   1        str[pos--] = ' ';
  87   1      
  88   1        // followed by thousandths digit
  89   1        // followed by hundredths digit
  90   1        // followed by tenths digit
  91   1        // followed by the decimal point at pos=1
  92   1        // followed by the ones digit
  93   1        for (; pos >= 0; pos--)
  94   1        {
  95   2          // Pos = 1 is the location of the decimal point
  96   2          if (count == 1)
  97   2          {
  98   3            str[pos--] = '.';
  99   3          }
 100   2              // Get the right-most digit from the number
 101   2              // and convert to ascii
 102   2              str[pos] = (t % 10) + '0';
 103   2      
 104   2              // Shift number by 1 decimal place to the right
C51 COMPILER V9.53.0.0   STOPWATCH                                                         05/15/2017 11:46:41 PAGE 3   

 105   2              t /= 10;
 106   2              count+=1;
 107   2        }
 108   1      }
 109          
 110          //sets up timer0 (off by default)
 111          void initTimer0(){
 112   1              uint8_t TCON_save;
 113   1              TCON_save = TCON;
 114   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 115   1              TH0 = 0xC0; //(0xC0 << TH0_TH0__SHIFT);
 116   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 117   1      
 118   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_48;
 119   1      
 120   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 121   1                                      | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 122   1      
 123   1              TCON |= TCON_TR0__RUN;
 124   1      
 125   1              IE_ET0 = 0;
 126   1      }
 127          
 128          //sets up BTN interrupts (on by default)
 129          void initBTNinterrupts(void){
 130   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_2
 131   1                                      | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_3;
 132   1              IE_EX0 = 1;
 133   1              IE_EX1 = 1;
 134   1      }
 135          
 136          //draws main time underneath "STOPWATCH" title
 137          void drawTime(){
 138   1              time2str(time, timeStr);
 139   1              drawScreenText(timeStr, 20, 2);
 140   1      }
 141          
 142          //draws a new lap if the lapcount (incremented by BTN1 interrupt does not match the current lap)
 143          void drawNewLap(){
 144   1              uint16_t temp_time;
 145   1              if(currentlap != lapcount && lapcount<9){
 146   2                      Laps[currentlap] = time;
 147   2                      if(currentlap == 0){
 148   3                              drawScreenText("Laps:", 40, 1);
 149   3                              time2str(time, timeStr);
 150   3                              drawScreenText(timeStr, 50, 1);
 151   3                      }else {
 152   3                              temp_time = Laps[currentlap]-Laps[currentlap-1];
 153   3                              time2str(temp_time, timeStr);
 154   3                              drawScreenText(timeStr, 50+(8*currentlap), 1);
 155   3                      }
 156   2                      currentlap = lapcount;
 157   2              }
 158   1      }
 159          
 160          //sets global variables
 161          void initGlobals(void){
 162   1              time = 0;
 163   1              lapcount = 0;
 164   1              currentlap = 0;
 165   1              start_track = 0;
 166   1      }
 167          
C51 COMPILER V9.53.0.0   STOPWATCH                                                         05/15/2017 11:46:41 PAGE 4   

 168          ///////////////////////////////////////////////////////////////////////////////
 169          // Interrupt Service Routines
 170          ///////////////////////////////////////////////////////////////////////////////
 171          
 172          //BTN0 TRIGGERED INTERRUPT
 173          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
 174          {
 175   1              if(BTN0 == 0){
 176   2                      IE_ET0 = !IE_ET0; //toggle timer0 interrupts
 177   2                      start_track = !start_track; //if start_track == 1, startup lights should go on next BTN0 press
 178   2              }
 179   1              IE_EX0 = 0; //TURN OFF EXTERNAL0 INTERRUPTS (SO THAT MULTIPLE BTN0 PRESSES ARE NOT REGISTERED)
 180   1      }
 181          
 182          //BTN1 TRIGGERED INTERRUPT
 183          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
 184          {
 185   1              if(BTN1 == 0){
 186   2                      lapcount++; //increase lapcount to tell drawLap() routine to continue
 187   2              }
 188   1              IE_EX1 = 0; //TURN OFF EXTERNAL1 INTERRUPTS (SO THAT MULTIPLE BTN1 PRESSES ARE NOT REGISTERED)
 189   1      }
 190          
 191          //-----------------------------------------------------------------------------
 192          // TIMER0_ISR
 193          //-----------------------------------------------------------------------------
 194          // Increments variable 'time' by 1 every time LED_TOGGLE RATE is reached
 195          //-----------------------------------------------------------------------------
 196          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 197          {
 198   1         static uint16_t counter = 0;
 199   1      
 200   1         counter++;
 201   1      
 202   1         if(counter == LED_TOGGLE_RATE)
 203   1         {
 204   2                time++;
 205   2                counter = 0;
 206   2         }
 207   1      }
 208          
 209          extern void start(void); //function written in assembly file "startLights.A51"
 210          
 211          ///////////////////////////////////////////////////////////////////////////////
 212          // Driver Function
 213          ///////////////////////////////////////////////////////////////////////////////
 214          
 215          void Stopwatch_main(void)
 216          {
 217   1              initBTNinterrupts();
 218   1              initTimer0();
 219   1              initGlobals();
 220   1      
 221   1              drawScreenText("STOPWATCH", 0, 2); //Title text
 222   1              drawScreenText("\t\t\t\t\t\t\t\t\tJoey&Nikola", 116, 1); //Draws string in bottom right corner
 223   1      
 224   1              while(1)
 225   1              {
 226   2                      drawTime();
 227   2                      drawNewLap();
 228   2      
 229   2                      if((start_track == 1) && (IE_EX0 == 0)){ //IF GOING FROM TIMER0 OFF -> TIMER0 ON
 230   3                              IE_ET0 = 0; //FORCE TIMER0 TO STOP DURING LIGHTS
C51 COMPILER V9.53.0.0   STOPWATCH                                                         05/15/2017 11:46:41 PAGE 5   

 231   3                              start(); //STARTUP LIGHTS
 232   3                              IE_ET0 = 1; //ALLOW TIMER0 TO CONTINUE
 233   3                      }
 234   2      
 235   2                      if(BTN0 == 1) //BTN0 UNPRESSED
 236   2                              IE_EX0 = 1; //TURN BACK ON EXTERNAL (BTN) INTERRUPTS
 237   2                      if(BTN1 == 1)
 238   2                              IE_EX1 = 1;
 239   2              }
 240   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    615    ----
   CONSTANT SIZE    =    837    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
