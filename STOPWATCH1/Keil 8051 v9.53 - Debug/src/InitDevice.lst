C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/src/InitDevice.c OMF2 SMALL DEBUG OB
                    -JECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDI
                    -R(/Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/inc;/Users/s150563/Documents/Cooper/Se
                    -mester 4/Comp_Arch/ECE251-Project1/STOPWATCH1/inc/config;/Users/s150563/Documents/Cooper/Semester 4/Comp_Arch/ECE251-Pro
                    -ject1/STOPWATCH1/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EF
                    -M8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common
                    -/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Ap
                    -plications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;/A
                    -pplications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/g
                    -raphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory
                    -_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm
                    -8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/Ap
                    -plications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/InitDevice
                    -.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_2_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1      //      ADC_0_enter_DefaultMode_from_RESET();
  32   1              CLOCK_0_enter_DefaultMode_from_RESET();
  33   1      //      TIMER01_0_enter_DefaultMode_from_RESET();
  34   1              TIMER16_3_enter_DefaultMode_from_RESET();
  35   1      //      TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  36   1              SPI_0_enter_DefaultMode_from_RESET();
  37   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  38   1              // Restore the SFRPAGE
  39   1              SFRPAGE = SFRPAGE_save;
  40   1              // [Config Calls]$
  41   1      
  42   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 2   

  43          
  44          //================================================================================
  45          // WDT_0_enter_DefaultMode_from_RESET
  46          //================================================================================
  47          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  48   1              // $[WDTCN - Watchdog Timer Control]
  49   1              SFRPAGE = 0x00;
  50   1              //Disable Watchdog with key sequence
  51   1              WDTCN = 0xDE; //First key
  52   1              WDTCN = 0xAD; //Second key
  53   1              // [WDTCN - Watchdog Timer Control]$
  54   1      
  55   1      }
  56          
  57          //================================================================================
  58          // PORTS_0_enter_DefaultMode_from_RESET
  59          //================================================================================
  60          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  61   1              // $[P0 - Port 0 Pin Latch]
  62   1              /*
  63   1               // B0 (Port 0 Bit 0 Latch) = HIGH (P0.0 is high. Set P0.0 to drive or
  64   1               //     float high.)
  65   1               // B1 (Port 0 Bit 1 Latch) = HIGH (P0.1 is high. Set P0.1 to drive or
  66   1               //     float high.)
  67   1               // B2 (Port 0 Bit 2 Latch) = HIGH (P0.2 is high. Set P0.2 to drive or
  68   1               //     float high.)
  69   1               // B3 (Port 0 Bit 3 Latch) = HIGH (P0.3 is high. Set P0.3 to drive or
  70   1               //     float high.)
  71   1               // B4 (Port 0 Bit 4 Latch) = HIGH (P0.4 is high. Set P0.4 to drive or
  72   1               //     float high.)
  73   1               // B5 (Port 0 Bit 5 Latch) = HIGH (P0.5 is high. Set P0.5 to drive or
  74   1               //     float high.)
  75   1               // B6 (Port 0 Bit 6 Latch) = HIGH (P0.6 is high. Set P0.6 to drive or
  76   1               //     float high.)
  77   1               // B7 (Port 0 Bit 7 Latch) = HIGH (P0.7 is high. Set P0.7 to drive or
  78   1               //     float high.)
  79   1               */
  80   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__HIGH | P0_B4__HIGH
  81   1                              | P0_B5__HIGH | P0_B6__HIGH | P0_B7__HIGH;
  82   1              // [P0 - Port 0 Pin Latch]$
  83   1      
  84   1              // $[P0MDOUT - Port 0 Output Mode]
  85   1              /*
  86   1               // B0 (Port 0 Bit 0 Output Mode) = OPEN_DRAIN (P0.0 output is open-
  87   1               //     drain.)
  88   1               // B1 (Port 0 Bit 1 Output Mode) = OPEN_DRAIN (P0.1 output is open-
  89   1               //     drain.)
  90   1               // B2 (Port 0 Bit 2 Output Mode) = OPEN_DRAIN (P0.2 output is open-
  91   1               //     drain.)
  92   1               // B3 (Port 0 Bit 3 Output Mode) = OPEN_DRAIN (P0.3 output is open-
  93   1               //     drain.)
  94   1               // B4 (Port 0 Bit 4 Output Mode) = OPEN_DRAIN (P0.4 output is open-
  95   1               //     drain.)
  96   1               // B5 (Port 0 Bit 5 Output Mode) = OPEN_DRAIN (P0.5 output is open-
  97   1               //     drain.)
  98   1               // B6 (Port 0 Bit 6 Output Mode) = PUSH_PULL (P0.6 output is push-pull.)
  99   1               // B7 (Port 0 Bit 7 Output Mode) = OPEN_DRAIN (P0.7 output is open-
 100   1               //     drain.)
 101   1               */
 102   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 103   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 104   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
 105   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 3   

 106   1              // [P0MDOUT - Port 0 Output Mode]$
 107   1      
 108   1              // $[P0MDIN - Port 0 Input Mode]
 109   1              /*
 110   1               // B0 (Port 0 Bit 0 Input Mode) = DIGITAL (P0.0 pin is configured for
 111   1               //     digital mode.)
 112   1               // B1 (Port 0 Bit 1 Input Mode) = DIGITAL (P0.1 pin is configured for
 113   1               //     digital mode.)
 114   1               // B2 (Port 0 Bit 2 Input Mode) = DIGITAL (P0.2 pin is configured for
 115   1               //     digital mode.)
 116   1               // B3 (Port 0 Bit 3 Input Mode) = DIGITAL (P0.3 pin is configured for
 117   1               //     digital mode.)
 118   1               // B4 (Port 0 Bit 4 Input Mode) = DIGITAL (P0.4 pin is configured for
 119   1               //     digital mode.)
 120   1               // B5 (Port 0 Bit 5 Input Mode) = DIGITAL (P0.5 pin is configured for
 121   1               //     digital mode.)
 122   1               // B6 (Port 0 Bit 6 Input Mode) = DIGITAL (P0.6 pin is configured for
 123   1               //     digital mode.)
 124   1               // B7 (Port 0 Bit 7 Input Mode) = DIGITAL (P0.7 pin is configured for
 125   1               //     digital mode.)
 126   1               */
 127   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 128   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 129   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 130   1              // [P0MDIN - Port 0 Input Mode]$
 131   1      
 132   1              // $[P0SKIP - Port 0 Skip]
 133   1              /*
 134   1               // B0 (Port 0 Bit 0 Skip) = SKIPPED (P0.0 pin is skipped by the
 135   1               //     crossbar.)
 136   1               // B1 (Port 0 Bit 1 Skip) = SKIPPED (P0.1 pin is skipped by the
 137   1               //     crossbar.)
 138   1               // B2 (Port 0 Bit 2 Skip) = SKIPPED (P0.2 pin is skipped by the
 139   1               //     crossbar.)
 140   1               // B3 (Port 0 Bit 3 Skip) = SKIPPED (P0.3 pin is skipped by the
 141   1               //     crossbar.)
 142   1               // B4 (Port 0 Bit 4 Skip) = SKIPPED (P0.4 pin is skipped by the
 143   1               //     crossbar.)
 144   1               // B5 (Port 0 Bit 5 Skip) = SKIPPED (P0.5 pin is skipped by the
 145   1               //     crossbar.)
 146   1               // B6 (Port 0 Bit 6 Skip) = NOT_SKIPPED (P0.6 pin is not skipped by the
 147   1               //     crossbar.)
 148   1               // B7 (Port 0 Bit 7 Skip) = NOT_SKIPPED (P0.7 pin is not skipped by the
 149   1               //     crossbar.)
 150   1               */
 151   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 152   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 153   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 154   1              // [P0SKIP - Port 0 Skip]$
 155   1      
 156   1              // $[P0MASK - Port 0 Mask]
 157   1              /*
 158   1               // B0 (Port 0 Bit 0 Mask Value) = IGNORED (P0.0 pin logic value is
 159   1               //     ignored and will not cause a port mismatch event.)
 160   1               // B1 (Port 0 Bit 1 Mask Value) = IGNORED (P0.1 pin logic value is
 161   1               //     ignored and will not cause a port mismatch event.)
 162   1               // B2 (Port 0 Bit 2 Mask Value) = COMPARED (P0.2 pin logic value is
 163   1               //     compared to P0MAT.2.)
 164   1               // B3 (Port 0 Bit 3 Mask Value) = IGNORED (P0.3 pin logic value is
 165   1               //     ignored and will not cause a port mismatch event.)
 166   1               // B4 (Port 0 Bit 4 Mask Value) = IGNORED (P0.4 pin logic value is
 167   1               //     ignored and will not cause a port mismatch event.)
 168   1               // B5 (Port 0 Bit 5 Mask Value) = IGNORED (P0.5 pin logic value is
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 4   

 169   1               //     ignored and will not cause a port mismatch event.)
 170   1               // B6 (Port 0 Bit 6 Mask Value) = IGNORED (P0.6 pin logic value is
 171   1               //     ignored and will not cause a port mismatch event.)
 172   1               // B7 (Port 0 Bit 7 Mask Value) = IGNORED (P0.7 pin logic value is
 173   1               //     ignored and will not cause a port mismatch event.)
 174   1               */
 175   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__COMPARED
 176   1                              | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 177   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 178   1              // [P0MASK - Port 0 Mask]$
 179   1      
 180   1              // $[P0MAT - Port 0 Match]
 181   1              /*
 182   1               // B0 (Port 0 Bit 0 Match Value) = HIGH (P0.0 pin logic value is compared
 183   1               //     with logic HIGH.)
 184   1               // B1 (Port 0 Bit 1 Match Value) = HIGH (P0.1 pin logic value is compared
 185   1               //     with logic HIGH.)
 186   1               // B2 (Port 0 Bit 2 Match Value) = HIGH (P0.2 pin logic value is compared
 187   1               //     with logic HIGH.)
 188   1               // B3 (Port 0 Bit 3 Match Value) = HIGH (P0.3 pin logic value is compared
 189   1               //     with logic HIGH.)
 190   1               // B4 (Port 0 Bit 4 Match Value) = HIGH (P0.4 pin logic value is compared
 191   1               //     with logic HIGH.)
 192   1               // B5 (Port 0 Bit 5 Match Value) = HIGH (P0.5 pin logic value is compared
 193   1               //     with logic HIGH.)
 194   1               // B6 (Port 0 Bit 6 Match Value) = HIGH (P0.6 pin logic value is compared
 195   1               //     with logic HIGH.)
 196   1               // B7 (Port 0 Bit 7 Match Value) = HIGH (P0.7 pin logic value is compared
 197   1               //     with logic HIGH.)
 198   1               */
 199   1              P0MAT = P0MAT_B0__HIGH | P0MAT_B1__HIGH | P0MAT_B2__HIGH | P0MAT_B3__HIGH
 200   1                              | P0MAT_B4__HIGH | P0MAT_B5__HIGH | P0MAT_B6__HIGH | P0MAT_B7__HIGH;
 201   1              // [P0MAT - Port 0 Match]$
 202   1      
 203   1      }
 204          
 205          //================================================================================
 206          // PORTS_1_enter_DefaultMode_from_RESET
 207          //================================================================================
 208          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 209   1              // $[P1 - Port 1 Pin Latch]
 210   1              /*
 211   1               // B0 (Port 1 Bit 0 Latch) = HIGH (P1.0 is high. Set P1.0 to drive or
 212   1               //     float high.)
 213   1               // B1 (Port 1 Bit 1 Latch) = HIGH (P1.1 is high. Set P1.1 to drive or
 214   1               //     float high.)
 215   1               // B2 (Port 1 Bit 2 Latch) = HIGH (P1.2 is high. Set P1.2 to drive or
 216   1               //     float high.)
 217   1               // B3 (Port 1 Bit 3 Latch) = HIGH (P1.3 is high. Set P1.3 to drive or
 218   1               //     float high.)
 219   1               // B4 (Port 1 Bit 4 Latch) = HIGH (P1.4 is high. Set P1.4 to drive or
 220   1               //     float high.)
 221   1               // B5 (Port 1 Bit 5 Latch) = HIGH (P1.5 is high. Set P1.5 to drive or
 222   1               //     float high.)
 223   1               // B6 (Port 1 Bit 6 Latch) = HIGH (P1.6 is high. Set P1.6 to drive or
 224   1               //     float high.)
 225   1               // B7 (Port 1 Bit 7 Latch) = HIGH (P1.7 is high. Set P1.7 to drive or
 226   1               //     float high.)
 227   1               */
 228   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH | P1_B3__HIGH | P1_B4__HIGH
 229   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
 230   1              // [P1 - Port 1 Pin Latch]$
 231   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 5   

 232   1              // $[P1MDOUT - Port 1 Output Mode]
 233   1              /*
 234   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 235   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 236   1               //     drain.)
 237   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 238   1               //     drain.)
 239   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 240   1               //     drain.)
 241   1               // B4 (Port 1 Bit 4 Output Mode) = PUSH_PULL (P1.4 output is push-pull.)
 242   1               // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
 243   1               // B6 (Port 1 Bit 6 Output Mode) = PUSH_PULL (P1.6 output is push-pull.)
 244   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 245   1               //     drain.)
 246   1               */
 247   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 248   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 249   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 250   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 251   1              // [P1MDOUT - Port 1 Output Mode]$
 252   1      
 253   1              // $[P1MDIN - Port 1 Input Mode]
 254   1              /*
 255   1               // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 256   1               //     digital mode.)
 257   1               // B1 (Port 1 Bit 1 Input Mode) = ANALOG (P1.1 pin is configured for
 258   1               //     analog mode.)
 259   1               // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 260   1               //     digital mode.)
 261   1               // B3 (Port 1 Bit 3 Input Mode) = DIGITAL (P1.3 pin is configured for
 262   1               //     digital mode.)
 263   1               // B4 (Port 1 Bit 4 Input Mode) = DIGITAL (P1.4 pin is configured for
 264   1               //     digital mode.)
 265   1               // B5 (Port 1 Bit 5 Input Mode) = DIGITAL (P1.5 pin is configured for
 266   1               //     digital mode.)
 267   1               // B6 (Port 1 Bit 6 Input Mode) = DIGITAL (P1.6 pin is configured for
 268   1               //     digital mode.)
 269   1               // B7 (Port 1 Bit 7 Input Mode) = ANALOG (P1.7 pin is configured for
 270   1               //     analog mode.)
 271   1               */
 272   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__ANALOG | P1MDIN_B2__DIGITAL
 273   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 274   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 275   1              // [P1MDIN - Port 1 Input Mode]$
 276   1      
 277   1              // $[P1SKIP - Port 1 Skip]
 278   1              /*
 279   1               // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 280   1               //     crossbar.)
 281   1               // B1 (Port 1 Bit 1 Skip) = SKIPPED (P1.1 pin is skipped by the
 282   1               //     crossbar.)
 283   1               // B2 (Port 1 Bit 2 Skip) = SKIPPED (P1.2 pin is skipped by the
 284   1               //     crossbar.)
 285   1               // B3 (Port 1 Bit 3 Skip) = SKIPPED (P1.3 pin is skipped by the
 286   1               //     crossbar.)
 287   1               // B4 (Port 1 Bit 4 Skip) = NOT_SKIPPED (P1.4 pin is not skipped by the
 288   1               //     crossbar.)
 289   1               // B5 (Port 1 Bit 5 Skip) = NOT_SKIPPED (P1.5 pin is not skipped by the
 290   1               //     crossbar.)
 291   1               // B6 (Port 1 Bit 6 Skip) = NOT_SKIPPED (P1.6 pin is not skipped by the
 292   1               //     crossbar.)
 293   1               // B7 (Port 1 Bit 7 Skip) = SKIPPED (P1.7 pin is skipped by the
 294   1               //     crossbar.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 6   

 295   1               */
 296   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 297   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED               //P1B4 not skipped previously
 298   1                              | P1SKIP_B5__SKIPPED | P1SKIP_B6__SKIPPED
 299   1                              | P1SKIP_B7__SKIPPED;
 300   1              // [P1SKIP - Port 1 Skip]$
 301   1      
 302   1              // $[P1MASK - Port 1 Mask]
 303   1              /*
 304   1               // B0 (Port 1 Bit 0 Mask Value) = IGNORED (P1.0 pin logic value is
 305   1               //     ignored and will not cause a port mismatch event.)
 306   1               // B1 (Port 1 Bit 1 Mask Value) = IGNORED (P1.1 pin logic value is
 307   1               //     ignored and will not cause a port mismatch event.)
 308   1               // B2 (Port 1 Bit 2 Mask Value) = IGNORED (P1.2 pin logic value is
 309   1               //     ignored and will not cause a port mismatch event.)
 310   1               // B3 (Port 1 Bit 3 Mask Value) = IGNORED (P1.3 pin logic value is
 311   1               //     ignored and will not cause a port mismatch event.)
 312   1               // B4 (Port 1 Bit 4 Mask Value) = IGNORED (P1.4 pin logic value is
 313   1               //     ignored and will not cause a port mismatch event.)
 314   1               // B5 (Port 1 Bit 5 Mask Value) = IGNORED (P1.5 pin logic value is
 315   1               //     ignored and will not cause a port mismatch event.)
 316   1               // B6 (Port 1 Bit 6 Mask Value) = IGNORED (P1.6 pin logic value is
 317   1               //     ignored and will not cause a port mismatch event.)
 318   1               // B7 (Port 1 Bit 7 Mask Value) = IGNORED (P1.7 pin logic value is
 319   1               //     ignored and will not cause a port mismatch event.)
 320   1               */
 321   1              P1MASK = P1MASK_B0__IGNORED | P1MASK_B1__IGNORED | P1MASK_B2__IGNORED
 322   1                              | P1MASK_B3__IGNORED | P1MASK_B4__IGNORED | P1MASK_B5__IGNORED
 323   1                              | P1MASK_B6__IGNORED | P1MASK_B7__IGNORED;
 324   1              // [P1MASK - Port 1 Mask]$
 325   1      
 326   1              // $[P1MAT - Port 1 Match]
 327   1              /*
 328   1               // B0 (Port 1 Bit 0 Match Value) = HIGH (P1.0 pin logic value is compared
 329   1               //     with logic HIGH.)
 330   1               // B1 (Port 1 Bit 1 Match Value) = HIGH (P1.1 pin logic value is compared
 331   1               //     with logic HIGH.)
 332   1               // B2 (Port 1 Bit 2 Match Value) = HIGH (P1.2 pin logic value is compared
 333   1               //     with logic HIGH.)
 334   1               // B3 (Port 1 Bit 3 Match Value) = HIGH (P1.3 pin logic value is compared
 335   1               //     with logic HIGH.)
 336   1               // B4 (Port 1 Bit 4 Match Value) = HIGH (P1.4 pin logic value is compared
 337   1               //     with logic HIGH.)
 338   1               // B5 (Port 1 Bit 5 Match Value) = HIGH (P1.5 pin logic value is compared
 339   1               //     with logic HIGH.)
 340   1               // B6 (Port 1 Bit 6 Match Value) = HIGH (P1.6 pin logic value is compared
 341   1               //     with logic HIGH.)
 342   1               // B7 (Port 1 Bit 7 Match Value) = HIGH (P1.7 pin logic value is compared
 343   1               //     with logic HIGH.)
 344   1               */
 345   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__HIGH | P1MAT_B2__HIGH | P1MAT_B3__HIGH
 346   1                              | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 347   1              // [P1MAT - Port 1 Match]$
 348   1      
 349   1      }
 350          
 351          //================================================================================
 352          // PORTS_2_enter_DefaultMode_from_RESET
 353          //================================================================================
 354          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 355   1              // $[P2 - Port 2 Pin Latch]
 356   1              // [P2 - Port 2 Pin Latch]$
 357   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 7   

 358   1              // $[P2MDOUT - Port 2 Output Mode]
 359   1              /*
 360   1               // B0 (Port 2 Bit 0 Output Mode) = OPEN_DRAIN (P2.0 output is open-
 361   1               //     drain.)
 362   1               // B1 (Port 2 Bit 1 Output Mode) = OPEN_DRAIN (P2.1 output is open-
 363   1               //     drain.)
 364   1               // B2 (Port 2 Bit 2 Output Mode) = OPEN_DRAIN (P2.2 output is open-
 365   1               //     drain.)
 366   1               // B3 (Port 2 Bit 3 Output Mode) = PUSH_PULL (P2.3 output is push-pull.)
 367   1               // B4 (Port 2 Bit 4 Output Mode) = OPEN_DRAIN (P2.4 output is open-
 368   1               //     drain.)
 369   1               // B5 (Port 2 Bit 5 Output Mode) = OPEN_DRAIN (P2.5 output is open-
 370   1               //     drain.)
 371   1               // B6 (Port 2 Bit 6 Output Mode) = PUSH_PULL (P2.6 output is push-pull.)
 372   1               */
 373   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 374   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 375   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 376   1                              | P2MDOUT_B6__PUSH_PULL;
 377   1              // [P2MDOUT - Port 2 Output Mode]$
 378   1      
 379   1              // $[P2MDIN - Port 2 Input Mode]
 380   1              // [P2MDIN - Port 2 Input Mode]$
 381   1      
 382   1              // $[P2SKIP - Port 2 Skip]
 383   1              /*
 384   1               // B0 (Port 2 Bit 0 Skip) = NOT_SKIPPED (P2.0 pin is not skipped by the
 385   1               //     crossbar.)
 386   1               // B1 (Port 2 Bit 1 Skip) = NOT_SKIPPED (P2.1 pin is not skipped by the
 387   1               //     crossbar.)
 388   1               // B2 (Port 2 Bit 2 Skip) = NOT_SKIPPED (P2.2 pin is not skipped by the
 389   1               //     crossbar.)
 390   1               // B3 (Port 2 Bit 3 Skip) = SKIPPED (P2.3 pin is skipped by the
 391   1               //     crossbar.)
 392   1               */
 393   1              SFRPAGE = 0x20;
 394   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 395   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 396   1              // [P2SKIP - Port 2 Skip]$
 397   1      
 398   1              // $[P2MASK - Port 2 Mask]
 399   1              // [P2MASK - Port 2 Mask]$
 400   1      
 401   1              // $[P2MAT - Port 2 Match]
 402   1              // [P2MAT - Port 2 Match]$
 403   1      
 404   1      }
 405          
 406          //================================================================================
 407          // PBCFG_0_enter_DefaultMode_from_RESET
 408          //================================================================================
 409          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 410   1              // $[XBR2 - Port I/O Crossbar 2]
 411   1              /*
 412   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 413   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 414   1               //     mode).)
 415   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 416   1               // URT1E (UART1 I/O Enable) = DISABLED (UART1 I/O unavailable at Port
 417   1               //     pin.)
 418   1               // URT1RTSE (UART1 RTS Output Enable) = DISABLED (UART1 RTS1 unavailable
 419   1               //     at Port pin.)
 420   1               // URT1CTSE (UART1 CTS Input Enable) = DISABLED (UART1 CTS1 unavailable
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 8   

 421   1               //     at Port pin.)
 422   1               */
 423   1              SFRPAGE = 0x00;
 424   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 425   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 426   1                              | XBR2_URT1CTSE__DISABLED;
 427   1              // [XBR2 - Port I/O Crossbar 2]$
 428   1      
 429   1              // $[PRTDRV - Port Drive Strength]
 430   1              // [PRTDRV - Port Drive Strength]$
 431   1      
 432   1              // $[XBR0 - Port I/O Crossbar 0]
 433   1              /*
 434   1               // URT0E (UART0 I/O Enable) = DISABLED (UART0 I/O unavailable at Port
 435   1               //     pin.)
 436   1               // SPI0E (SPI I/O Enable) = ENABLED (SPI I/O routed to Port pins. The SPI
 437   1               //     can be assigned either 3 or 4 GPIO pins.)
 438   1               // SMB0E (SMB0 I/O Enable) = DISABLED (SMBus 0 I/O unavailable at Port
 439   1               //     pins.)
 440   1               // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 441   1               //     pin.)
 442   1               // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 443   1               //     (Asynchronous CP0 unavailable at Port pin.)
 444   1               // CP1E (Comparator1 Output Enable) = DISABLED (CP1 unavailable at Port
 445   1               //     pin.)
 446   1               // CP1AE (Comparator1 Asynchronous Output Enable) = DISABLED
 447   1               //     (Asynchronous CP1 unavailable at Port pin.)
 448   1               // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 449   1               //     pin.)
 450   1               */
 451   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 452   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 453   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 454   1              // [XBR0 - Port I/O Crossbar 0]$
 455   1      
 456   1              // $[XBR1 - Port I/O Crossbar 1]
 457   1              /*
 458   1               // PCA0ME (PCA Module I/O Enable) = CEX0_TO_CEX2 (CEX0, CEX1, CEX2 routed
 459   1               //     to Port pins.)
 460   1               // ECIE (PCA0 External Counter Input Enable) = DISABLED (ECI unavailable
 461   1               //     at Port pin.)
 462   1               // T0E (T0 Enable) = DISABLED (T0 unavailable at Port pin.)
 463   1               // T1E (T1 Enable) = DISABLED (T1 unavailable at Port pin.)
 464   1               // T2E (T2 Enable) = DISABLED (T2 unavailable at Port pin.)
 465   1               */
 466   1              XBR1 = XBR1_PCA0ME__CEX0_TO_CEX2 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 467   1                              | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 468   1              // [XBR1 - Port I/O Crossbar 1]$
 469   1      
 470   1      }
 471          
 472          //================================================================================
 473          // ADC_0_enter_DefaultMode_from_RESET
 474          //================================================================================
 475          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 476   1              // $[ADC0CN2 - ADC0 Control 2]
 477   1              /*
 478   1               // ADCM (Start of Conversion Mode Select) = TIMER0 (ADC0 conversion
 479   1               //     initiated on overflow of Timer 0.)
 480   1               // PACEN (Preserve Accumulator Enable) = PAC_DISABLED (The ADC
 481   1               //     accumulator is over-written with the results of any conversion (or set
 482   1               //     of conversions as specified by ADRPT).)
 483   1               */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 9   

 484   1              ADC0CN2 = ADC0CN2_ADCM__TIMER0 | ADC0CN2_PACEN__PAC_DISABLED;
 485   1              // [ADC0CN2 - ADC0 Control 2]$
 486   1      
 487   1              // $[ADC0CN1 - ADC0 Control 1]
 488   1              /*
 489   1               // ADBITS (Resolution Control) = 10_BIT (ADC0 operates in 10-bit mode.)
 490   1               // ADSJST (Accumulator Shift and Justify) = RIGHT_NO_SHIFT (Right
 491   1               //     justified. No shifting applied.)
 492   1               // ADRPT (Repeat Count) = ACC_1 (Perform and Accumulate 1 conversion.)
 493   1               */
 494   1              ADC0CN1 = ADC0CN1_ADBITS__10_BIT | ADC0CN1_ADSJST__RIGHT_NO_SHIFT
 495   1                              | ADC0CN1_ADRPT__ACC_1;
 496   1              // [ADC0CN1 - ADC0 Control 1]$
 497   1      
 498   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 499   1              /*
 500   1               // ADC0MX (AMUX0 Positive Input Selection) = ADC0P13 (Select ADC0.13.)
 501   1               */
 502   1              ADC0MX = ADC0MX_ADC0MX__ADC0P13;
 503   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 504   1      
 505   1              // $[ADC0CF2 - ADC0 Power Control]
 506   1              /*
 507   1               // GNDSL (Analog Ground Reference) = GND_PIN (The ADC0 ground reference
 508   1               //     is the GND pin.)
 509   1               // REFSL (Voltage Reference Select) = VDD_PIN (The ADC0 voltage reference
 510   1               //     is the VDD pin.)
 511   1               // ADPWR (Power Up Delay Time) = 0x1F
 512   1               */
 513   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__VDD_PIN
 514   1                              | (0x1F << ADC0CF2_ADPWR__SHIFT);
 515   1              // [ADC0CF2 - ADC0 Power Control]$
 516   1      
 517   1              // $[ADC0CF0 - ADC0 Configuration]
 518   1              /*
 519   1               // ADCLKSEL (ADC Clock Select) = SYSCLK (ADCCLK = SYSCLK.)
 520   1               // ADSC (SAR Clock Divider) = 0x01
 521   1               */
 522   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x01 << ADC0CF0_ADSC__SHIFT);
 523   1              // [ADC0CF0 - ADC0 Configuration]$
 524   1      
 525   1              // $[ADC0CF1 - ADC0 Configuration]
 526   1              /*
 527   1               // ADLPM (Low Power Mode Enable) = LP_DISABLED (Disable low power
 528   1               //     mode.)
 529   1               // ADTK (Conversion Tracking Time) = 0x01
 530   1               */
 531   1              ADC0CF1 = ADC0CF1_ADLPM__LP_DISABLED | (0x01 << ADC0CF1_ADTK__SHIFT);
 532   1              // [ADC0CF1 - ADC0 Configuration]$
 533   1      
 534   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 535   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 536   1      
 537   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 538   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 539   1      
 540   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 541   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 542   1      
 543   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 544   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 545   1      
 546   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 10  

 547   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 548   1      
 549   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 550   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
 551   1      
 552   1              // $[ADC0CN0 - ADC0 Control 0]
 553   1              /*
 554   1               // ADEN (ADC Enable) = ENABLED (Enable ADC0 (active and ready for data
 555   1               //     conversions).)
 556   1               */
 557   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 558   1              // [ADC0CN0 - ADC0 Control 0]$
 559   1      
 560   1      }
 561          
 562          //================================================================================
 563          // CLOCK_0_enter_DefaultMode_from_RESET
 564          //================================================================================
 565          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 566   1              // $[HFOSC1 Setup]
 567   1              // [HFOSC1 Setup]$
 568   1      
 569   1              // $[CLKSEL - Clock Select]
 570   1              /*
 571   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 572   1               //     High Frequency Oscillator 0.)
 573   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 574   1               //     selected clock source divided by 1.)
 575   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 576   1               //     High Frequency Oscillator 0.)
 577   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 578   1               //     selected clock source divided by 1.)
 579   1               */
 580   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 581   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 582   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 583   1                      ;
 584   1              // [CLKSEL - Clock Select]$
 585   1      
 586   1      }
 587          
 588          //================================================================================
 589          // TIMER01_0_enter_DefaultMode_from_RESET
 590          //================================================================================
 591          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 592   1              // $[Timer Initialization]
 593   1              //Save Timer Configuration
 594   1              uint8_t TCON_save;
 595   1              TCON_save = TCON;
 596   1              //Stop Timers
 597   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 598   1      
 599   1              // [Timer Initialization]$
 600   1      
 601   1              // $[TH0 - Timer 0 High Byte]
 602   1              /*
 603   1               // TH0 (Timer 0 High Byte) = 0x01
 604   1               */
 605   1              TH0 = (0x01 << TH0_TH0__SHIFT);
 606   1              // [TH0 - Timer 0 High Byte]$
 607   1      
 608   1              // $[TL0 - Timer 0 Low Byte]
 609   1              // [TL0 - Timer 0 Low Byte]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 11  

 610   1      
 611   1              // $[TH1 - Timer 1 High Byte]
 612   1              // [TH1 - Timer 1 High Byte]$
 613   1      
 614   1              // $[TL1 - Timer 1 Low Byte]
 615   1              // [TL1 - Timer 1 Low Byte]$
 616   1      
 617   1              // $[Timer Restoration]
 618   1              //Restore Timer Configuration
 619   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 620   1      
 621   1              // [Timer Restoration]$
 622   1      
 623   1      }
 624          
 625          //================================================================================
 626          // TIMER16_3_enter_DefaultMode_from_RESET
 627          //================================================================================
 628          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 629   1              // $[Timer Initialization]
 630   1              // Save Timer Configuration
 631   1              uint8_t TMR3CN0_TR3_save;
 632   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 633   1              // Stop Timer
 634   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 635   1              // [Timer Initialization]$
 636   1      
 637   1              // $[TMR3CN1 - Timer 3 Control 1]
 638   1              // [TMR3CN1 - Timer 3 Control 1]$
 639   1      
 640   1              // $[TMR3CN0 - Timer 3 Control]
 641   1              // [TMR3CN0 - Timer 3 Control]$
 642   1      
 643   1              // $[TMR3H - Timer 3 High Byte]
 644   1              /*
 645   1               // TMR3H (Timer 3 High Byte) = 0xF8
 646   1               */
 647   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 648   1              // [TMR3H - Timer 3 High Byte]$
 649   1      
 650   1              // $[TMR3L - Timer 3 Low Byte]
 651   1              /*
 652   1               // TMR3L (Timer 3 Low Byte) = 0x06
 653   1               */
 654   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 655   1              // [TMR3L - Timer 3 Low Byte]$
 656   1      
 657   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 658   1              /*
 659   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xF8
 660   1               */
 661   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 662   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 663   1      
 664   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 665   1              /*
 666   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x06
 667   1               */
 668   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 669   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 670   1      
 671   1              // $[TMR3CN0]
 672   1              /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 12  

 673   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 674   1               */
 675   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 676   1              // [TMR3CN0]$
 677   1      
 678   1              // $[Timer Restoration]
 679   1              // Restore Timer Configuration
 680   1              TMR3CN0 |= TMR3CN0_TR3_save;
 681   1              // [Timer Restoration]$
 682   1      
 683   1      }
 684          
 685          //================================================================================
 686          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 687          //================================================================================
 688          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 689   1              // $[CKCON0 - Clock Control 0]
 690   1              /*
 691   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_48 (System clock divided by 48.)
 692   1               // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 693   1               //     defined by the prescale field, SCA.)
 694   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 695   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 696   1               // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 697   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 698   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 699   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 700   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 701   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 702   1               // T1M (Timer 1 Clock Select) = PRESCALE (Timer 1 uses the clock defined
 703   1               //     by the prescale field, SCA.)
 704   1               */
 705   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_48 | CKCON0_T0M__PRESCALE
 706   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 707   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 708   1                              | CKCON0_T1M__PRESCALE;
 709   1              // [CKCON0 - Clock Control 0]$
 710   1      
 711   1              // $[CKCON1 - Clock Control 1]
 712   1              // [CKCON1 - Clock Control 1]$
 713   1      
 714   1              // $[TMOD - Timer 0/1 Mode]
 715   1              /*
 716   1               // T0M (Timer 0 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 717   1               //     Auto-Reload)
 718   1               // T1M (Timer 1 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 719   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 720   1               //     on the clock defined by T0M in the CKCON0 register.)
 721   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 722   1               //     irrespective of INT0 logic level.)
 723   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 724   1               //     on the clock defined by T1M in the CKCON0 register.)
 725   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 726   1               //     irrespective of INT1 logic level.)
 727   1               */
 728   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 729   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 730   1              // [TMOD - Timer 0/1 Mode]$
 731   1      
 732   1              // $[TCON - Timer 0/1 Control]
 733   1              /*
 734   1               // TR0 (Timer 0 Run Control) = RUN (Start Timer 0 running.)
 735   1               */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 13  

 736   1              TCON |= TCON_TR0__RUN;
 737   1              // [TCON - Timer 0/1 Control]$
 738   1      
 739   1      }
 740          
 741          //================================================================================
 742          // SPI_0_enter_DefaultMode_from_RESET
 743          //================================================================================
 744          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
 745   1              // $[SPI0CKR - SPI0 Clock Rate]
 746   1              /*
 747   1               // SPI0CKR (SPI0 Clock Rate) = 0x0B
 748   1               */
 749   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 750   1              // [SPI0CKR - SPI0 Clock Rate]$
 751   1      
 752   1              // $[SPI0CFG - SPI0 Configuration]
 753   1              /*
 754   1               // MSTEN (Master Mode Enable) = MASTER_ENABLED (Enable master mode.
 755   1               //     Operate as a master.)
 756   1               */
 757   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 758   1              // [SPI0CFG - SPI0 Configuration]$
 759   1      
 760   1              // $[SPI0PCF - SPI0 Pin Configuration]
 761   1              // [SPI0PCF - SPI0 Pin Configuration]$
 762   1      
 763   1              // $[SPI0CN0 - SPI0 Control]
 764   1              /*
 765   1               // SPIEN (SPI0 Enable) = ENABLED (Enable the SPI module.)
 766   1               // NSSMD (Slave Select Mode) = 3_WIRE (3-Wire Slave or 3-Wire Master
 767   1               //     Mode. NSS signal is not routed to a port pin.)
 768   1               */
 769   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 770   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 771   1              // [SPI0CN0 - SPI0 Control]$
 772   1      
 773   1      }
 774          
 775          //================================================================================
 776          // INTERRUPT_0_enter_DefaultMode_from_RESET
 777          //================================================================================
 778          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 779   1              // $[EIE1 - Extended Interrupt Enable 1]
 780   1              /*
 781   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = ENABLED (Enable
 782   1               //     interrupt requests generated by the ADINT flag.)
 783   1               // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 784   1               //     ADC0 Window Comparison interrupt.)
 785   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 786   1               //     interrupts.)
 787   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 788   1               //     interrupts.)
 789   1               // EMAT (Port Match Interrupts Enable) = ENABLED (Enable interrupt
 790   1               //     requests generated by a Port Match.)
 791   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 792   1               //     (Disable all PCA0 interrupts.)
 793   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 794   1               //     interrupts.)
 795   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 796   1               //     generated by the TF3L or TF3H flags.)
 797   1               */
 798   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 14  

 799   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED //PORTMATCHING EMAT DISABLED
 800   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 801   1              // [EIE1 - Extended Interrupt Enable 1]$
 802   1      
 803   1              // $[EIE2 - Extended Interrupt Enable 2]
 804   1              // [EIE2 - Extended Interrupt Enable 2]$
 805   1      
 806   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 807   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 808   1      
 809   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 810   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 811   1      
 812   1              // $[EIP2 - Extended Interrupt Priority 2]
 813   1              // [EIP2 - Extended Interrupt Priority 2]$
 814   1      
 815   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 816   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 817   1      
 818   1              // $[IE - Interrupt Enable]
 819   1              /*
 820   1               // EA (All Interrupts Enable) = DISABLED (Disable all interrupt sources.)
 821   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 822   1               //     interrupt 0.)
 823   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 824   1               //     interrupt 1.)
 825   1               // ESPI0 (SPI0 Interrupt Enable) = ENABLED (Enable interrupt requests
 826   1               //     generated by SPI0.)
 827   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 828   1               //     interrupt.)
 829   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 830   1               //     interrupt.)
 831   1               // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 832   1               //     generated by the TF2L or TF2H flags.)
 833   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 834   1               */
 835   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 836   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 837   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 838   1              // [IE - Interrupt Enable]$
 839   1      
 840   1              // $[IP - Interrupt Priority]
 841   1              // [IP - Interrupt Priority]$
 842   1      
 843   1              // $[IPH - Interrupt Priority High]
 844   1              // [IPH - Interrupt Priority High]$
 845   1      
 846   1      }
 847          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    207    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/23/2017 19:55:56 PAGE 15  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
