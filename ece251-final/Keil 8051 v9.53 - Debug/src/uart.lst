C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\src/uart.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/s150563/SimplicityStudio/v4_workspace/UARTstopwatch/src/uart.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNI
                    -NGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/s150563/Simplicity
                    -Studio/v4_workspace/UARTstopwatch/inc/graphics;/Users/s150563/SimplicityStudio/v4_workspace/UARTstopwatch/inc;/Users/s15
                    -0563/SimplicityStudio/v4_workspace/UARTstopwatch/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/develop
                    -er/sdks/8051/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//ki
                    -ts/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM
                    -8BB3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/
                    -drivers/efm8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drive
                    -rs/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/driv
                    -ers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/c
                    -ommon/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3
                    -//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8B
                    -B3/inc) PRINT(.\src/uart.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/uart.OBJ)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////
   2          // Includes
   3          ///////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include <stdio.h>
   7          #include "tick.h"
   8          #include "disp.h"
   9          #include "render.h"
  10          #include "voltmeter.h"
  11          #include "joystick.h"
  12          #include "adc.h"
  13          #include "thinfont.h"
  14          #include "InitDevice.h"
  15          #include <SI_EFM8BB3_Register_Enums.h>
  16          #include "retargetserial.h"
  17          
  18          // Configurator set for HFOSC0/8
  19          #define SYSCLK             3062000
  20          
  21          #define LED_TOGGLE_RATE           800 //toggles timer0 about every 100ms
  22          
  23          ///////////////////////////////////////////////////////////////////////////////
  24          // PIN DEFINITIONS
  25          ///////////////////////////////////////////////////////////////////////////////
  26          SI_SBIT(BTN0, SFR_P0, 2);                 // P0.2 BTN0
  27          SI_SBIT(BTN1, SFR_P0, 3);                 // P0.3 BTN1
  28          SI_SBIT(LEDG, SFR_P1, 4);                                 // P1.4 LED GREEN
  29          
  30          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
  31          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  32          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  33          
  34          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
  35          #define BC_DISCONNECTED 0              // 0 = Board Controller disconnected
  36                                                 //     to EFM8 UART pins
  37          #define BC_CONNECTED    1              // 1 = Board Controller connected
  38                                                 //     to EFM8 UART pins
  39          
  40          #define SCREEN_HEIGHT 11
  41          #define SCREEN_WIDTH 20
  42          #define BUFFER_EXTRA 10
  43          
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 2   

  44          ///////////////////////////////////////////////////////////////////////////////
  45          // Globals
  46          ///////////////////////////////////////////////////////////////////////////////
  47          
  48          // Generic line buffer
  49          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  50          SI_SEGMENT_VARIABLE(String[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  51          
  52          static unsigned char xdata buffer[SCREEN_HEIGHT+BUFFER_EXTRA][SCREEN_WIDTH] = {0};
  53          static unsigned char xdata hexbuff[SCREEN_HEIGHT+BUFFER_EXTRA][SCREEN_WIDTH] = {0};
  54          static const unsigned char blank[SCREEN_WIDTH] = {0};
  55          
  56          unsigned char hex[3] = {0};
  57          uint8_t hex_mode = 0;
  58          uint8_t drawMode = 1;
  59          
  60          uint8_t i = 0;
  61          uint8_t j = 0;
  62          
  63          uint8_t m = 0;
  64          uint8_t n = 0; //hex buff indicies
  65          
  66          uint8_t insertion_mode = 1; //insertion mode == 1, typing possible, ==0, typing not possible
  67          
  68          uint8_t dir; //joystick direction
  69          
  70          uint8_t topASCII = 0;
  71          uint8_t topHEX = 0; //top row of each buffer visible on LCD
  72          
  73          uint8_t drawASCII = 0;
  74          uint8_t drawHEX = 0;
  75          
  76          
  77          
  78          ///////////////////////////////////////////////////////////////////////////////
  79          // Supporting Functions
  80          //////////////////////////////////////////////////////////////////////////////
  81          
  82          //(taken from voltmeter.c)
  83          //-----------------------------------------------------------------------------
  84          // drawScreenText
  85          //-----------------------------------------------------------------------------
  86          //
  87          // Show one line of text on the screen
  88          //
  89          // str - pointer to string text (0 - 21 characters) to display
  90          // rowNum - row number of the screen (0 - 127)
  91          // fontScale - font scaler (1 - 4)
  92          //
  93          void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_t fontSc
             -ale)
  94          {
  95   1        uint8_t i, j;
  96   1      
  97   1        for (i = 0; i < FONT_HEIGHT; i++)
  98   1        {
  99   2          RENDER_ClrLine(Line);
 100   2          RENDER_Large_StrLine(Line, 4, i, (SI_VARIABLE_SEGMENT_POINTER(, char, RENDER_STR_SEG))str, fontScale);
 101   2      
 102   2          for (j = 1; j < fontScale + 1; j++)
 103   2          {
 104   3            DISP_WriteLine(rowNum + (i * fontScale) + j, Line);
 105   3          }
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 3   

 106   2        }
 107   1      }
 108          
 109          char hexDigit(unsigned n){
 110   1          if (n < 10) {
 111   2              return n + '0';
 112   2          } else {
 113   2              return (n - 10) + 'A';
 114   2          }
 115   1      }
 116          
 117          void charToHex(char c){
 118   1          hex[0] = hexDigit(c / 0x10);
 119   1          hex[1] = hexDigit(c % 0x10);
 120   1          hex[2] = 32;
 121   1      }
 122          
 123          void charToHexbuff(char c){
 124   1              charToHex(buffer[i][j]);
 125   1              hexbuff[m][n] = hex[0];
 126   1              hexbuff[m][n+1] = hex[1];
 127   1              hexbuff[m][n+2] = hex[2];
 128   1      }
*** WARNING C280 IN LINE 123 OF /Users/s150563/SimplicityStudio/v4_workspace/UARTstopwatch/src/uart.c: 'c': unreferenced
             - local variable
 129          
 130          void blankBlock(void){
 131   1              uint8_t p;
 132   1              for(p=0; p<SCREEN_HEIGHT+1; p++){ //blank screen
 133   2                      drawScreenText(blank, p*10, 1);
 134   2              }
 135   1      }
 136          
 137          void drawBlockHEX(void){
 138   1              uint8_t p;
 139   1              if(m-topHEX>SCREEN_HEIGHT){
 140   2                      for(p=topHEX; p<SCREEN_HEIGHT; p++){ //draw buffer from topASCII to i
 141   3                              drawScreenText(hexbuff[p], (p-topHEX)*10, 1);
 142   3                      }
 143   2              } else {
 144   2                      for(p=topHEX; p<=m; p++){ //draw buffer from topASCII to i
 145   3                              drawScreenText(hexbuff[p], (p-topHEX)*10, 1);
 146   3                      }
 147   2              }
 148   1      }
 149          
 150          void drawBlockASCII(void){
 151   1              uint8_t p;
 152   1              if(i-topASCII>SCREEN_HEIGHT){
 153   2                      for(p=topASCII; p<SCREEN_HEIGHT; p++){ //draw buffer from topASCII to i
 154   3                              drawScreenText(buffer[p], (p-topASCII)*10, 1);
 155   3                      }
 156   2              } else {
 157   2                      for(p=topASCII; p<=i; p++){ //draw buffer from topASCII to i
 158   3                              drawScreenText(buffer[p], (p-topASCII)*10, 1);
 159   3                      }
 160   2              }
 161   1      }
 162          
 163          void redrawScreen(void){
 164   1              if(drawMode == 1){
 165   2                      if(hex_mode == 0 && insertion_mode == 1){
 166   3                              drawScreenText("Write          ASCII", 120, 1);
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 4   

 167   3                      } else if(hex_mode == 1 && insertion_mode == 1){
 168   3                              drawScreenText("Write            HEX", 120, 1);
 169   3                      } else if(hex_mode == 0 && insertion_mode == 0){
 170   3                              drawScreenText("Read           ASCII", 120, 1);
 171   3                      } else if(hex_mode == 1 && insertion_mode == 0){
 172   3                              drawScreenText("Read             HEX", 120, 1);
 173   3                      }
 174   2                      drawMode = 0;
 175   2              }
 176   1              if(hex_mode == 1 && drawHEX == 1){ //REDRAWING HEXIDECIMAL
 177   2                      blankBlock();
 178   2                      drawBlockHEX();
 179   2                      drawHEX = 0;
 180   2              } else if(hex_mode == 0 && drawASCII == 1){ //REDRAWING ASCII
 181   2                      blankBlock();
 182   2                      drawBlockASCII();
 183   2                      drawASCII = 0;
 184   2              }
 185   1      }
 186          
 187          void scroll_check(void){
 188   1              dir = JOYSTICK_convert_mv_to_direction(ADC_GetVoltage());
 189   1              if(dir == JOYSTICK_N){
 190   2                      if(topASCII<SCREEN_HEIGHT+BUFFER_EXTRA && hex_mode == 0){
 191   3                              topASCII++;
 192   3                              drawASCII = 1;
 193   3                      }
 194   2                      if(topHEX<SCREEN_HEIGHT+BUFFER_EXTRA && hex_mode == 1){
 195   3                              topHEX++;
 196   3                              drawHEX = 1;
 197   3                      }
 198   2              }
 199   1              else if (dir == JOYSTICK_S){
 200   2                      if(topASCII>0 && hex_mode == 0){
 201   3                              topASCII--;
 202   3                              drawASCII = 1;
 203   3                      }
 204   2                      if(topHEX>0 && hex_mode == 1){
 205   3                              topHEX--;
 206   3                              drawHEX = 1;
 207   3                      }
 208   2              }
 209   1      }
 210          
 211          void insertchar(void){
 212   1              buffer[i][j] = getchar();
 213   1      
 214   1              if(buffer[i][j] == 27){  //if ESC
 215   2                      insertion_mode = 0;
 216   2                      drawMode = 1;
 217   2                      buffer[i][j] = 0;
 218   2      
 219   2              } else if(buffer[i][j] == 8 || buffer[i][j] == 127) { //if Backspace or DEL
 220   2                      buffer[i][j] = 0;
 221   2                      if(hex_mode == 0 && insertion_mode == 1){
 222   3                              if(j==0){
 223   4                                      i--;
 224   4                                      j=19;
 225   4                                      buffer[i][j] = 0;
 226   4                                      drawScreenText(buffer[i], i*10, 1);
 227   4                              } else{
 228   4                                      j--;
 229   4                                      buffer[i][j] = 0;
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 5   

 230   4                                      drawScreenText(buffer[i], i*10, 1);
 231   4                              }
 232   3                      } else if (hex_mode == 1 && insertion_mode == 1){
 233   3                              if(n<2){
 234   4                                      m--;
 235   4                                      n=17;
 236   4                                      hexbuff[m][n] = 0;
 237   4                                      hexbuff[m][n-1] = 0;
 238   4                                      hexbuff[m][n-2] = 0;
 239   4                                      n = n-2;
 240   4                                      drawScreenText(hexbuff[m], m*10, 1);
 241   4                              } else{
 242   4                                      n--;
 243   4                                      buffer[m][n] = 0;
 244   4                                      hexbuff[m][n-1] = 0;
 245   4                                      hexbuff[m][n-2] = 0;
 246   4                                      n = n-2;
 247   4                                      drawScreenText(hexbuff[m], m*10, 1);
 248   4                              }
 249   3                      }
 250   2      
 251   2              } else {
 252   2                      charToHexbuff(buffer[i][j]);
 253   2      
 254   2                      if(hex_mode == 1 && insertion_mode == 1){
 255   3                              drawScreenText(hexbuff[m], (m-topHEX)*10, 1);
 256   3                      } else if(hex_mode == 0 && insertion_mode == 1){
 257   3                              drawScreenText(buffer[i], (i-topASCII)*10, 1);
 258   3                      }
 259   2      
 260   2                      j++;
 261   2                      n = n+3;
 262   2      
 263   2                      if(j==SCREEN_WIDTH-2){
 264   3                              j=0;
 265   3                              i++;
 266   3                      }
 267   2                      if(i==SCREEN_HEIGHT+BUFFER_EXTRA){
 268   3                              i=0;
 269   3                              topASCII = 0;
 270   3                      }else if(i==topASCII+SCREEN_HEIGHT){
 271   3                              topASCII++;
 272   3                              drawASCII = 1;
 273   3                      }
 274   2                      if(n>SCREEN_WIDTH-3){
 275   3                              n=0;
 276   3                              m++;
 277   3                      }
 278   2                      if(m==SCREEN_HEIGHT+BUFFER_EXTRA){
 279   3                              m=0;
 280   3                              topHEX = 0;
 281   3                      }else if(m==topHEX+SCREEN_HEIGHT){
 282   3                              topHEX++;
 283   3                              drawHEX = 1;
 284   3                      }
 285   2              }
 286   1      }
 287          
 288          
 289          //sets up timer0 (off by default)
 290          void initTimer0(){
 291   1              uint8_t TCON_save;
 292   1              TCON_save = TCON;
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 6   

 293   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 294   1              TH0 = 0xC0; //(0xC0 << TH0_TH0__SHIFT);
 295   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 296   1      
 297   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_48;
 298   1      
 299   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 300   1                                      | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 301   1      
 302   1              TCON |= TCON_TR0__RUN;
 303   1      
 304   1              IE_ET0 = 0;
 305   1      }
 306          
 307          //sets up BTN interrupts (on by default)
 308          void initBTNinterrupts(void){
 309   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_2
 310   1                                      | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_3;
 311   1              IE_EX0 = 1;
 312   1              IE_EX1 = 1;
 313   1      }
 314          
 315          void initUART0(void){
 316   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 317   1      }
 318          
 319          void initTimer1(void){
 320   1              uint8_t TCON_save;
 321   1              TCON_save = TCON;
 322   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 323   1              TH1 = (0x96 << TH1_TH1__SHIFT);
 324   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 325   1      
 326   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 327   1                                      | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 328   1                                      | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 329   1                                      | CKCON0_T1M__SYSCLK;
 330   1      
 331   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 332   1                                      | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 333   1      
 334   1              TCON |= TCON_TR1__RUN;
 335   1      }
 336          
 337          ///////////////////////////////////////////////////////////////////////////////
 338          // Interrupt Service Routines
 339          ///////////////////////////////////////////////////////////////////////////////
 340          
 341          //BTN0 TRIGGERED INTERRUPT
 342          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
 343          {
 344   1              if(BTN0 == 0){
 345   2                      hex_mode = !hex_mode;
 346   2                      drawMode = 1;
 347   2                      if(hex_mode == 1){
 348   3                              drawHEX = 1;
 349   3                      } else drawASCII = 1;
 350   2              }
 351   1              IE_EX0 = 0; //TURN OFF EXTERNAL0 INTERRUPTS (SO THAT MULTIPLE BTN0 PRESSES ARE NOT REGISTERED)
 352   1      }
 353          
 354          //BTN1 TRIGGERED INTERRUPT
 355          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 7   

 356          {
 357   1              if(BTN1 == 0 && insertion_mode == 0){
 358   2                      insertion_mode = 1;
 359   2                      drawMode = 1;
 360   2              }
 361   1      
 362   1              IE_EX1 = 0; //TURN OFF EXTERNAL1 INTERRUPTS (SO THAT MULTIPLE BTN1 PRESSES ARE NOT REGISTERED)
 363   1      }
 364          
 365          
 366          //-----------------------------------------------------------------------------
 367          // TIMER0_ISR
 368          //-----------------------------------------------------------------------------
 369          // Increments variable 'time' by 1 every time LED_TOGGLE RATE is reached
 370          //-----------------------------------------------------------------------------
 371          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 372          {
 373   1         static uint16_t counter = 0;
 374   1      
 375   1         counter++;
 376   1      
 377   1         if(counter == LED_TOGGLE_RATE)
 378   1         {
 379   2                counter = 0;
 380   2         }
 381   1      }
 382          
 383          ///////////////////////////////////////////////////////////////////////////////
 384          // Driver Function
 385          ///////////////////////////////////////////////////////////////////////////////
 386          
 387          void uart_main(void)
 388          {
 389   1              initBTNinterrupts();
 390   1              initTimer1();
 391   1              initUART0();
 392   1      
 393   1          BC_EN = BC_DISCONNECTED;               // Board controller connected to EFM8
 394   1                                                                                 // UART pins
 395   1      
 396   1          SCON0_TI = 1;                       // This STDIO library requires TI to
 397   1                                                                                 // be set for prints to occur
 398   1      
 399   1              while(1)
 400   1              {
 401   2                      redrawScreen();
 402   2      
 403   2                      if(insertion_mode == 1){
 404   3                              insertchar();
 405   3                      } else {
 406   3                              scroll_check();
 407   3                      }
 408   2      
 409   2      
 410   2                      if(BTN0 == 1) //BTN0 UNPRESSED
 411   2                              IE_EX0 = 1; //TURN BACK ON EXTERNAL (BTN) INTERRUPTS
 412   2                      if(BTN1 == 1)
 413   2                              IE_EX1 = 1;
 414   2              }
 415   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.53.0.0   UART                                                              05/08/2017 19:07:05 PAGE 8   

   CODE SIZE        =   1500    ----
   CONSTANT SIZE    =    884    ----
   XDATA SIZE       =    872    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
